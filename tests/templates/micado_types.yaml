# TOSCA types definitions for MiCADO
#
# MiCADO version: v0.9.1
# TOSCA version: Simple Profile in YAML v1.2
tosca_definitions_version: tosca_simple_yaml_1_2
description: |
  Custom types definitions for MiCADO Application Description Templates (ADT)
imports:
  - container_kubernetes.yaml
  - cloud_occopus.yaml
  - cloud_terraform.yaml
  - policy_scaling.yaml
  - policy_security.yaml
  - policy_monitoring.yaml
## Below you can find some information on the different ways
## TOSCA types are used in MiCADO ADTs. Any actual type
## definitions can be found in the imports above.

# TOSCA Artifact Types
#
# MiCADO uses TOSCA artifacts to define externally pulled images,
# files, or data sources. The most common of these is the TOSCA
# suggested non-normative type for Docker images
#   * tosca.artifacts.Deployment.Image.Container.Docker
#
# The following subsections of artifact types are defined
#   under custom_types/cloud/common.yaml
#   * Generic CloudInit artifact type
#   under custom_types/container/common.yaml
#   * Generic Docker secret artifact type

# TOSCA Capability Types
#
# MiCADO uses TOSCA capabilities to define what interoperability &
# relationships a node can support. No custom types are required,
# though we here define a TOSCA capability which only joined the
# normative types in TOSCA Simple Profile v1.1:
#   under custom_types/cloud/common.yaml
#   * tosca.capabilities.Compute

# TOSCA Data Types
#
# TOSCA data types can be used to restrict the entry schema of
# node properties, or support custom data entry.
#
# The following subsections of artifact types are defined
#   under custom_types/cloud/
#   * Generic contextualisation data type
#   under custom_types/container/
#   * Generic PortSpec data type
#   * Swarm data types for deploy, resource and placement

# TOSCA Interfaces Types
#
# MiCADO uses TOSCA interfaces to pass orchestrator specific
# parameters to the orchestration tools responsible for managing
# the lifecycle of various compoenents of the application.
# Generally this is facilitated by passing interface inputs
# into the output file that gets generated by a translator
#
# OpenStack TOSCAParser does not enforce any requirement
# or restriction on potential inputs when these types
# are used in application description templates (ADTs)
#
# The following interfaces types are defined
#   under custom_types/cloud/common:
#   * tosca.interface.MiCADO.Occopus
#   * tosca.interface.MiCADO.Terraform
#
#   under custom_types/container/common:
#   * tosca.interface.MiCADO.Swarm
#   * tosca.interface.MiCADO.Kubernetes

# TOSCA Node Types
#
# MiCADO uses TOSCA nodes to build cloud components such as containers,
# virtual machines or volumes. These components are further configured,
# and their lifecycles managed, by passing orchestrator specific
# options via TOSCA interfaces.
#
# OpenStack TOSCAParser WILL enforce restrictions on properties when
# these types are used in application description templates. If
# a property does not appear in the node definition below (or in a parent)
# it cannot be expressed inside a template.
#
# The following subsections of node types are defined
#   under custom_types/cloud/
#   * Generic compute node types
#   * Occopus node types
#   * Terraform node types
#   under custom_types/container/
#   * Generic container node types
#   * Generic volume node types
#   * Generic config node types
#   * Swarm node types
#   * Kubernetes node types
node_types:
  micado.microservice:
    description: Generic type for MiCADO microservices
    derived_from: tosca.nodes.MiCADO.Container.Application.Docker
  micado.deployment:
    description: Generic type for MiCADO "deployments" (i.e. infrastructure)
    derived_from: tosca.nodes.MiCADO.Compute
# TOSCA Policy Types
#
# TOSCA policy types are used to specify scaling, alerting, monitoring
# security and other requirements for nodes. Currently these types exist
#   under custom_types/policy/
#   * tosca.policies.Scaling.MiCADO
#   * tosca.policies.Alerting.MiCADO
#   * tosca.policies.Monitoring.MiCADO
#   * tosca.policies.Security.MiCADO
# TOSCA Relationship Types
#
# MiCADO uses TOSCA relationships to define interoperability between
# different components of the application. Most interoperability
# requirements can be defined with these TOSCA normative types:
#   * tosca.relationships.HostedOn (container-in-pod or container/pod-on-VM)
#   * tosca.relationships.AttachesTo (volume to container)
#
# In Docker Swarm the a custom ConnectsTo type was used to connect specific
# containers over a specific Docker network. It is not used in Kubernetes
#   under custom_types/container/swarm.yaml
#   * tosca.relationships.MiCADO.ConnectsTo
