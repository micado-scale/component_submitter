tosca_definitions_version: tosca_simple_yaml_1_2
artifact_types:
  tosca.artifacts.File.Secrets.Docker:
    description: A legacy artifact type for Docker secrets
    derived_from: tosca.artifacts.File
    properties:
      name:
        type: string
        required: false
      file:
        type: string
        required: false
      external:
        type: boolean
        required: false
data_types:
  deploy_type:
    description: Available properties for Swarm specific orchestration
    properties:
      mode:
        type: string
        required: false
      replicas:
        type: integer
        required: false
      resources:
        type: resource_type
        required: false
      labels:
        type: map
        required: false
      placement:
        type: placement_type
        required: false
      restart_policy:
        type: map
        required: false
      update_config:
        type: map
        required: false
  resource_type:
    description: Available fields for Swarm deploy resources
    properties:
      cpus:
        type: string
        required: false
      memory:
        type: string
        required: false
  placement_type:
    description: Available fields for Swarm deploy placement
    properties:
      constraints:
        required: false
        type: list
      preferences:
        required: false
        type: list
  ports_type:
    description: |
      Available properties for the ports setting in a container node.

      Supports Kubernetes flat ServiceSpec (ServiceSpec & ServicePort flattened),
      ContainerPort spec AND long syntax Docker compose port options
    properties:
      # Kubernetes ServicePort fields
      name:
        desription: Name of port
        type: string
        required: false
      nodePort:
        description: Kubernetes nodePort assignment (30000-32767)
        type: integer
        required: false
        constraints:
          - greater_or_equal: 30000
          - less_or_equal: 32767
      port:
        description: Visible port (Kubernetes-style)
        type: integer
        required: false
      protocol:
        description: Protocol (Swarm & Kubernetes) - SCTP is Kube only
        type: string
        required: false
        constraints:
          - valid_values:
              - 'tcp'
              - 'TCP'
              - 'udp'
              - 'UDP'
              - 'SCTP'
      targetPort:
        description: Port inside container (Kubernetes-style)
        type: string
        required: false
      # Kubernetes ContainerPort fields
      containerPort:
        description: |
          Give more info on exposed ports, omitting this does not
          prevent the port from being exposed (internally)
        type: integer
        required: false
      hostIP:
        description: Host IP to bind external port to
        type: string
        required: false
      hostPort:
        description: port to expose on the host. If HostNetwork then must == ContainerPort
        type: integer
        required: false
      # Docker Compose long syntax port options
      target:
        description: Port inside container (Swarm-style)
        type: integer
        required: false
      published:
        description: Visible port (Swarm-style)
        type: integer
        required: false
      mode:
        description: Port mode *translates to Kubernetes host port*
        type: string
        required: false
        constraints:
          - valid_values:
              - 'host'
              - 'ingress'
      # Kubernetes Service field
      metadata:
        description: Kubernetes space for adding metadata (such as service name)
        type: map
        required: false
      # Kubernetes ServiceSpec fields
      clusterIP:
        description: Kubernetes clusterIP assignment (10.0.0.1/24)
        type: string
        required: false
      externalIPs:
        description: list of IPs which nodes will also accept traffic for
        type: list
        required: false
      externalName:
        description: external reference which DNS component will return as a CNAME
        type: string
        required: false
      externalTrafficPolicy:
        description: route to node-local or cluster-wide endpoints
        type: string
        required: false
      healthCheckNodePort:
        description: healthcheck for LoadBalancer, node-local mode
        type: integer
        required: false
      loadBalancerIP:
        description: specify IP for LoadBalancer, if type is LB
        type: string
        required: false
      loadBalancerSourceRanges:
        description: restrict traffic to specified IPs
        type: list
        required: false
      ports:
        description: ServicePort definition (also supported in this map (one-level up))
        type: list
        required: false
      publishNotReadyAddresses:
        description: force publish NotReadyAddresses
        type: boolean
        required: false
      selector:
        description: overwrite the automatically generated selector of the service
        type: map
        required: false
      sessionAffinity:
        description: maintain session affinity
        type: string
        required: false
      sessionAffinityConfig:
        description: configurations of session affinity
        type: map
        required: false
      type:
        description: The Kubernetes equivalent of mode
        type: string
        required: false
        constraints:
          - valid_values:
              - 'ClusterIP'
              - 'NodePort'
              - 'LoadBalancer'
              - 'ExternalName'
interface_types:
  tosca.interfaces.MiCADO.Swarm:
    description: Interface for container orchestration with Docker Swarm
    derived_from: tosca.interfaces.node.lifecycle.Standard
    create:
      description: Orchestrate a container node with Swarm
  tosca.interfaces.MiCADO.Kubernetes:
    description: Interface for container orchestration with Kubernetes
    derived_from: tosca.interfaces.node.lifecycle.Standard
    create:
      description: Complete/fill the manifest for Kubernetes
node_types:
  tosca.nodes.MiCADO.Container.Application:
    description: |
      Generic description of a container
    derived_from: tosca.nodes.Container.Application
  tosca.nodes.MiCADO.Container.Application.Pod:
    description: |
      "Generic" description of a container enclosure (ie. Kubernetes Pod)
    derived_from: tosca.nodes.MiCADO.Container.Application
    interfaces:
      Kubernetes:
        type: tosca.interfaces.MiCADO.Kubernetes
    requirements:
      - service:
          capability: tosca.capabilities.Container.Docker
          node: tosca.nodes.MiCADO.Container.Application.Docker
          relationship: tosca.relationships.MiCADO.ConnectsTo
      - container:
          capability: tosca.capabilities.Container.Docker
          node: tosca.nodes.MiCADO.Container.Application.Docker
          relationship: tosca.relationships.HostedOn
      - host:
          capability: tosca.capabilities.Compute
          node: tosca.nodes.MiCADO.Compute
          relationship: tosca.relationships.HostedOn
  # Node type for Docker application container
  # This node supports both Docker and Kubernetes style field names
  # Where possible, especially for common fields, an adaptor should
  # attempt to translate these fields
  tosca.nodes.MiCADO.Container.Application.Docker:
    description: |
      description of a Docker container in the style of a Kubernetes
      ContainerSpec or Docker Compose long syntax
    derived_from: tosca.nodes.MiCADO.Container.Application
    properties:
      # Kubernetes style field names
      # These field names are present in the ContainerSpec of a Pod
      # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#container-v1-core
      args:
        description: arguments to pass to entrypoint
        type: list
        required: false
      command:
        description: command run by container (Kubernetes-style & Docker-list-style)
        type: list
        required: false
      env:
        description: environment variables to pass to the container
        type: list
        required: false
      envFrom:
        description: environment variables from a source
        type: list
        required: false
      image:
        description: container image
        type: string
        required: false
      imagePullPolicy:
        description: Force pull an image
        type: string
        required: false
        constraints:
          - valid_values:
              - 'Always'
              - 'IfNotPresent'
      lifecycle:
        description: Kubernetes hooks for lifecycle management
        type: map
        required: false
      livenessProbe:
        description: Kubernetes-style healthcheck
        type: map
        required: false
      name:
        description: define the container name
        type: string
        required: false
      ports:
        description: ports to be forwarded (long-syntax Compose or flat Kubernetes ServiceSpec)
        type: list
        required: false
        entry_schema:
          type: ports_type
      readinessProbe:
        description: Kubernetes-style ready-check
        type: map
        required: false
      resources:
        description: resource requirements for the container (Kubernetes-style)
        type: map
        required: false
      securityContext:
        description: specify security options (Kubernetes-style)
        type: map
        required: false
      stdin:
        description: allocate a buffer for stdin for this container (Kubernetes-style)
        type: boolean
        required: false
      stdinOnce:
        description: close the stdin channel after one attach
        type: boolean
        required: false
      terminationMessagePath:
        description: Kubernetes container path to write termination message
        type: string
        required: false
      terminationMessagePolicy:
        description: Kubernetes container termination message
        type: string
        required: false
      tty:
        description: allocate a TTY for the container (requires stdin set to true)
        type: boolean
        required: false
      volumeDevices:
        description: block volume devices to be used by the container
        type: list
        required: false
      volumeMounts:
        description: pod volumes to mount inside container filesystems
        type: list
        required: false
      workingDir:
        description: Kubernetes container working directory
        type: string
        required: false
      # Docker Swarm / Compose-style field names
      # If field name is the same across orchestrators, Kubernetes-style takes preference
      # Any Windows-only properties or properties ignored by Swarm are not included
      configs:
        description: point to created configs
        type: list
        required: false
      container_name:
        description: the container name *translates to Kubernetes name*
        type: string
        required: false
      deploy:
        description: supports Swarm-only options of a Compose file
        type: deploy_type
        required: false
      dns:
        description: custom DNS servers *translates to Kubernetes PodSpec dnsConfig*
        type: list
        required: false
      dns_search:
        description: custom DNS searches *translates to Kubernetes PodSpec dnsConfig*
        type: list
        required: false
      entrypoint:
        description: command run by container (string) *translates to Kubernetes command*
        type: string
        required: false
      env_file:
        description: load environment vars from a file
        type: list
        required: false
      environment:
        description: environment variables (map-style) *translates to Kubernetes env*
        type: map
        required: false
      expose:
        description: ports to expose to other linked services
        type: list
        required: false
      extra_hosts:
        description: host aliases to add to /etc/hosts
        type: list
        required: false
      healthcheck:
        description: Docker-style healthcheck
        type: map
        required: false
      init:
        description: run an init to forward signals, reap processes
        type: boolean
        required: false
      labels:
        description: Labels *translates to Kubernetes PodSpec labels*
        type: map
        required: false
      logging:
        description: logging configuration
        type: map
        required: false
      networks:
        description: network configuration
        type: map
        required: false
      pid:
        description: option for using host PID *translates to Kubernetes hostPID*
        type: string
        required: false
      privileged:
        description: run with root equivalency *translates to Kubernetes SecurityContext*
        type: boolean
        required: false
      secrets:
        description: passing secrets
        type: list
        required: false
      stdin_open:
        description: allocate a buffer for stdin *translates to Kubernetes stdin*
        type: boolean
        required: false
      stop_grace_period:
        description: when container is killed after shutdown *translates to Kubernetes grace...*
        type: string
        required: false
      stop_signal:
        description: signal to stop the container
        type: string
        required: false
      ulimits:
        description: override default ulimits of container
        type: map
        required: false
      volumes:
        description: volumes to mount
        type: list
        required: false
      working_dir:
        description: working directory *translates to Kubernetes workingDir*
        type: string
        required: false
    # Traditionally, TOSCA recommends specifying the container image
    # as an artifact. In most cases, this over complicates the authoring
    # of an ADT. Here we get the image property and abstract that
    # complexity away from the user
    artifacts:
      image:
        type: tosca.artifacts.Deployment.Image.Container.Docker
        file: {get_property: [SELF, image]}
        repository: docker_hub
    # Possible interfaces for this node
    interfaces:
      Swarm:
        type: tosca.interfaces.MiCADO.Swarm
      Kubernetes:
        type: tosca.interfaces.MiCADO.Kubernetes
    # Possible outputs for this node
    attributes:
      port:
        type: integer
    # Requests for relations this node supports
    capabilities:
      service:
        type: tosca.capabilities.Container.Docker
      container:
        type: tosca.capabilities.Container.Docker
      scalable:
        type: tosca.capabilities.Scalable
    # Outward relationships this node supports
    requirements:
      - service:
          capability: tosca.capabilities.Container.Docker
          node: tosca.nodes.MiCADO.Container.Application.Docker
          relationship: tosca.relationships.MiCADO.ConnectsTo
      - container:
          capability: tosca.capabilities.Container.Docker
          node: tosca.nodes.MiCADO.Container.Application.Docker
          relationship: tosca.relationships.HostedOn
      - host:
          capability: tosca.capabilities.Compute
          node: tosca.nodes.MiCADO.Compute
          relationship: tosca.relationships.HostedOn
      - volume:
          capability: tosca.capabilities.Attachment
          node: tosca.nodes.MiCADO.Container.Volume
          relationship: tosca.relationships.AttachesTo
  tosca.nodes.MiCADO.Container.Application.Docker.Init:
    description: Description of an init Docker container for Kubernetes
    derived_from: tosca.nodes.MiCADO.Container.Application.Docker
    # No interfaces are defined since an Init container cannot exist alone
  tosca.nodes.MiCADO.Container.Config:
    description: The base node type for Container configuration stores
    derived_from: tosca.nodes.Root
    properties:
      path:
        type: string
        description: path on disk (and/or default mount path)
        required: false
    capabilities:
      volume:
        type: tosca.capabilities.Attachment
    interfaces:
      Swarm:
        type: tosca.interfaces.MiCADO.Swarm
      Kubernetes:
        type: tosca.interfaces.MiCADO.Kubernetes
  tosca.nodes.MiCADO.Container.Volume:
    description: The base node for container volumes
    derived_from: tosca.nodes.BlockStorage
    properties:
      name:
        type: string
        description: name of the volume
        required: false
      labels:
        type: map
        description: map of metadata labels
        required: false
      path:
        type: string
        description: path on disk (and/or default mount path)
        required: false
      size:
        type: string
        description: overwrite size requirement
        required: false
    capabilities:
      volume:
        type: tosca.capabilities.Attachment
    interfaces:
      Swarm:
        type: tosca.interfaces.MiCADO.Swarm
      Kubernetes:
        type: tosca.interfaces.MiCADO.Kubernetes
relationship_types:
  # In Docker /Swarm the following custom type was used to connect specific
  # containers over a specific Docker network. It is not used in Kubernetes
  #   * tosca.relationships.MiCADO.ConnectsTo
  tosca.relationships.MiCADO.ConnectsTo:
    description: used to connect containers over a specific Docker network
    derived_from: tosca.relationships.ConnectsTo
    properties:
      network:
        type: string
        description: Name of Docker network to connect containers over
        required: true
